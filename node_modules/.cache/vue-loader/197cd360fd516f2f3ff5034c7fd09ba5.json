{"remainingRequest":"C:\\xampp\\htdocs\\pengaduan_masyarakat-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\xampp\\htdocs\\pengaduan_masyarakat-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xampp\\htdocs\\pengaduan_masyarakat-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\pengaduan_masyarakat-front\\src\\views\\data_siswa.vue?vue&type=template&id=70f7c02c&","dependencies":[{"path":"C:\\xampp\\htdocs\\pengaduan_masyarakat-front\\src\\views\\data_siswa.vue","mtime":1618913475781},{"path":"C:\\xampp\\htdocs\\pengaduan_masyarakat-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\pengaduan_masyarakat-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\pengaduan_masyarakat-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\pengaduan_masyarakat-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}